# -*- coding: utf-8 -*-
"""
Created on Tue Apr 16 10:18:50 2019

@author: Felix
"""


 # =============================================================================
 # Problem 1:
 #
 # If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 # The sum of these multiples is 23.
 # Find the sum of all the multiples of 3 or 5 below 1000.
 # 
 #=============================================================================

# Gibt die Anzahl der Zahlen an, welche durch 3 bzw. 5 geteilt werden kÃ¶nnen.
### First Step:
def numbers():
    available = list(range(1, 26))
    numbers = 0
    
    for i in available:
        # print(i / 3)
        x = i / 3
        y = i / 5
        
        if x in available:
#           print(x)  
            print(i)
            numbers = numbers + 1
            
        if y in available:
#           print(y)
            print(i)
            numbers = numbers + 1
           
        if y in available and x in available:
#           print(y)
            print(i)
            numbers = numbers - 1
    print(numbers)
numbers()
###
#
# Solution:

def sum_list(myList) : 
      
    # Sums elements one by one 
    result = 0
    for x in myList: 
         result = result + x  
    return result  
      
def numbers():
    available = list(range(1, 1000))
    numbers = 0
    sum = []
    
    for i in available:
        # print(i / 3)
        x = i / 3
        y = i / 5
        
        if x in available:
#           print(x)  
            print(i)
            numbers = numbers + 1
            sum.append(i) 
            
        if y in available:
#           print(y)
            print(i)
            numbers = numbers + 1
            sum.append(i)
        if y in available and x in available:
#           print(y)
            print(i)
            numbers = numbers - 1
            sum.remove(i)
    print(numbers)
    print(sum)
    print(sum_list(sum))
    
numbers()
#
#
# Clean final solution:


def sum_list(myList) : 
      
    # Multiply elements one by one 
    result = 0
    for x in myList: 
         result = result + x  
    return result  
      
def numbers():
    available = list(range(1, 1000))
    sum = []
    
    for i in available:
        x = i / 3
        y = i / 5
        
        if x in available: 
            print(i)
            sum.append(i) 
        if y in available:
            print(i)
            sum.append(i)
        if y in available and x in available:
            print(i)
            sum.remove(i)
    print(sum)
    print(sum_list(sum))
    
numbers()


# Python program to multiply all values in the 
# list using traversal 
  
def multiply_list(myList) : 
      
    # Multiply elements one by one 
    result = 1
    for x in myList: 
         result = result * x  
    return result  
      
list2 = [3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25]

multiply_list(list2)

# Another solution:

def Divisible(n):
    if n%3==0 or n%5==0 :
        return True
sum_number=0
for n in range(1,1000):
    if Divisible(n):
        sum_number+=n
print (sum_number)


# =============================================================================
# Problem 2:
# 
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms. -> even-valued = gerade Zahlen
# =============================================================================


def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1  
    else: 
        return fibonacci(n-1) + fibonacci(n-2)


def fibo(n):
    print(n)
    for n in range (1, 20):
        if n == 0:
            pass
        elif n == 1:
            return 1
        else:
            return fibo(n-1)
        
            



def fibonacci(n):
        if n == 0:
            return 0
        elif n == 1:
            return 1  
        else: 
            return fibonacci(n-1) + fibonacci(n-2)
        
def fibo(n):
    #x = n
    if n > 0:
        return fibonacci(n)
    
    fibo(n-1)
        
        
fibo(10)
       


fibonacci(10) 



# von 1 - 1000
# erste zahl wird zum zÃ¤hler addiert, die zweite Zahl wird abgezogen 
# 2. Fall: umgekehrt

# case 1:

def even (n):
    if n % 2 == 0: 
        return True 
sum_number = 0
for n in range (1,  100):
    if even(n):
        sum_number = sum_number + n
    else:
        sum_number = sum_number - n
    
print(sum_number)

# case 2:

def even (n):
    if n % 2 == 0: 
        return True 
sum_number = 0
for n in range (1, 100):
    if even(n):
        sum_number -= n
    else:
        sum_number +=  n
    
print(sum_number)










